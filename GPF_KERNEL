物理メモリは、ページ単位（4KBのページフレーム単位）で管理している。
しかし、カーネル内のデータ構造は、4KB にぴったり嵌らない。

--------------------------------------
Linux でページ単位ではない単位で、メモリを確保/開放できるには、次の ような方法がある:
--------------------------------------
1.kmalloc/kfreeと似たkernel api:
    kmalloc(size_t size, gfp_t flags)
    kfree(),
    get_zeroed_page();
    __get_free_page();
    __get_free_pages();
    devm_kzalloc(); //devが無くなると、そのdevのResourceとして、allocしたメモリも自動でfreeされる。
    vmalloc()
    vfree()
    ...
    
2.スラブ アロケータ(slab allocator)
    slab
    
--------------------------------------
gpf_t flags:
--------------------------------------
flagは、三つに分かれる:
  動作修飾子:   kernelが、必要なmemoryを、どう配るのか
  ZONE修飾子:  kernelが、必要なmemoryを、どこから配るのか
  TYPE:

--------------------------------------------------------------------------------
include/linux/gfp.h にて定義

#define GFP_ATOMIC	(__GFP_HIGH|__GFP_ATOMIC|__GFP_KSWAPD_RECLAIM)
#define GFP_KERNEL	(__GFP_RECLAIM | __GFP_IO | __GFP_FS)
#define GFP_KERNEL_ACCOUNT (GFP_KERNEL | __GFP_ACCOUNT)
#define GFP_NOWAIT	(__GFP_KSWAPD_RECLAIM)
#define GFP_NOIO	(__GFP_RECLAIM)
#define GFP_NOFS	(__GFP_RECLAIM | __GFP_IO)
#define GFP_USER	(__GFP_RECLAIM | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
#define GFP_DMA		__GFP_DMA
#define GFP_DMA32	__GFP_DMA32
#define GFP_HIGHUSER	(GFP_USER | __GFP_HIGHMEM)
#define GFP_HIGHUSER_MOVABLE	(GFP_HIGHUSER | __GFP_MOVABLE)
#define GFP_TRANSHUGE_LIGHT	((GFP_HIGHUSER_MOVABLE | __GFP_COMP | \
			 __GFP_NOMEMALLOC | __GFP_NOWARN) & ~__GFP_RECLAIM)
#define GFP_TRANSHUGE	(GFP_TRANSHUGE_LIGHT | __GFP_DIRECT_RECLAIM)

/* Convert GFP flags to their corresponding migrate type */
#define GFP_MOVABLE_MASK (__GFP_RECLAIMABLE|__GFP_MOVABLE)
#define GFP_MOVABLE_SHIFT 3
--------------------------------------------------------------------------------
GFP_ATOMIC    　 高優先度。スリープ不可。割込みハンドラや下半分(bottom half)で使う。
GFP_NOIO	      スリープ可、入出力不可。
GFP_NOFS	      スリープ化、入出力可、ファイル操作不可。ファイルシステムの実装で使う(他のファイルシステムの操作を開始しない)。
GFP_KERNEL	    カーネルにて、一番よく使うallocの方法。メモリが無い時、スリープ可。
GFP_USER	      ユーザ空間用のメモリの通常の方法。スリープ可。
GFP_HIGHUSER	  HIGHMEMゾーンからの割当て。スリープ可。
GFP_DMA         DMAゾーンからの割当て。連続した物理メモリalloc。デバイス・ドライバ等が使う。


--------------------------------------------------------------------------------
#define GFP_KERNEL(__GFP_WAIT | __GFP_IO | __GFP_FS)
__GFP_WAIT: メモリpageが足りない時に、sleep可;
__GFP_IO:   DISK IO許可;
__GFP_FS:   FS IO許可;

