See
    Documentation/devicetree/overlay-notes.txt

---------------------------------------------------------
Device Tree Overlay とは
---------------------------------------------------------
Linux Kernelには、何時の頃から(Version 4.0辺り?) Device Tree Overlay という機能が追加されています。
これは、Linuxの動作中の Device Tree に、新たに Device Treeを追加したり、削除したりする機能です。


---------------------------------------------------------
Device Tree の問題点
---------------------------------------------------------
通常は、ハードウェア情報を Device Tree Blob という形で用意しておいて、Linux のBoot時に、この情報に従って、デバイスドライバのロードや初期化を行います。
しかし、この方法では Linux を起動する前に、ハードウェアが決まっている場合しか使えず、
FPGA のような、リコンフィギャラブルなハードウェアとは、相性がよくありません。


---------------------------------------------------------
Devicetree Overlay でできること
---------------------------------------------------------
Linux Kernelは、起動時にbootloaderから、指定されたデバイスツリーを読み込みます(base tree)。
通常は、デバイスツリー情報は、再起動しない限り、変更はできないが、オーバーレイを使えば、base treeの内容に対し、
    1. node(=デバイス）の追加
    2. propertyの追加
    3. propertyのvalue変更
といったことが、再起動なしで、できるようになります。


オーバーレイする内容は、オーバーレイファイルで記述し、そのファイルを読み込むことで、実施されます。
オーバーレイファイルは、複数読み込むことも可能です。
オーバーレイした内容は、オーバーレイファイル単位で、削除することも可能で、そのオーバーレイファイルを読み込む前の状態に、戻すこともできます。


---------------------------------------------------------
Linux Kernelのdevice tree overlays機能をOnする
---------------------------------------------------------
.config で CONFIG_OF_OVERLAY=y を追加する

OR
make menu_config
    ---> Device Drivers
            ---> Device Tree and Open Firmware support
                    ---> Device Tree overlays をチェックする
                    
---------------------------------------------------------
Devicetree Overlay ファイルの書き方
---------------------------------------------------------
デバイスツリーオーバーレイファイルも、テキストソースとバイナリがあり、同じくdtcでコンパイルします。
デバイスツリーファイルと区別するため、ここではオーバーレイソースの拡張子を.dtso, オーバーレイバイナリの拡張子を.dtboとしてます。

必要最小限度のオーバーレイソースファイルは以下です。

/plugin/;                     /* allow undefined label references and record them */
/ {
    fragment@0 {              /* node名は何でも良い */
        target = <phandle>;   /* overlayするnodeの phandle */
        /*　OR　*/
　　　　 target-path="/path";  /* overlayするnodeの path */

        __overlay__ {
                /* オーバーレイする property 定義 たち*/
                /* オーバーレイする node 定義 たち*/
        };
    };
};

必要な内容はシンプルで、下記となります。
    1./dts-v1/; の後に /plugin/;
    2.ルートnode
    3.ルートnodeの子node。 nodeの名前は何でも良い
    4.子node に target（もしくは target-path）propertyと __overlay__ nodeを持たせる
        4_1. target or target-path propertyで、オーバレイ対象となるnodeを指定
                target ではphandleで指定(or ラベル)
                target-path ではpath stringで指定
        4_2. __overlay__ node 内に具体的にオーバーレイする内容を記述
                追加したいpropertyやnodeたちを定義する


/plugin/;は、オーバーレイファイルの記述中に、過去に読み込んだデバイスツリー(live tree)で定義したlabelを参照できるようにするためのものです。
例えば、targetのvalueとして、base treeで定義されているラベル名を使えるようになります
（オーバーレイファイル中に、このファイル内で定義されていないラベルがあっても、dtcでエラーとならない）。

ただし、base treeを、コンパイル時に、.dtbにシンボル情報も含めるように、-@ オプション付で、コンパイルする必要があります。



---------------------------------------------------------
Devicetree Overlayの実行方法
---------------------------------------------------------
dtc コマンド:

    $ dtc -@ -I dts -O dtb -o my_overlay-overlay.dts my_overlay.dtbo

    //The -@ is needed for overlays as it prevents the compiler from looking up the references from the source file, which it - of course - wouldn't find.


dtoverlay コマンド:

    dtoverlay is used to dynamically load device trees.

    dtoverlay -a to list all available overlays
    dtoverlay -l to list the currently applied overlays
    dtoverlay -h <overlay_name> to get information about any overlay, its parameters and possible values
    dtoverlay <overlay_name> <param_name>=<param_value> to add an overlay with some parameters
    dtoverlay -r <overlay_name> to remove a previously loaded overlay

    Note:
        dtoverlay -l only lists dynamically loaded modules and only those can be removed with dtoverlay -r.
        Anything that was loaded via /boot/config.txt is considered part of the base device tree.
        Some overlays have to be added this way and can't be loaded by dtoverlay.

---------------------------------------------------------
オーバーレイ削除
---------------------------------------------------------




